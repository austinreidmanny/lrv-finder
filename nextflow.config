// ---------------------------------------------------------------------------------------------- //
// Setup default parameters
// ---------------------------------------------------------------------------------------------- //
params.sra = "NULL"
params.output = "output/"
params.threads = "4"
params.memory = "8"
params.tempdir = "/tmp/"
params.referenceseqs = "$baseDir/resources/lrv-genomes.fasta"
// ---------------------------------------------------------------------------------------------- //

//----------------------------------------------------------------------------//
// Set up two profiles: running the pipeline locally vs. remotely
//----------------------------------------------------------------------------//
profiles {

    // Set up a profile for running the pipeline locally [the default]
    standard {

        process {
            executor = "local"
            cache = "lenient"
            conda = "$baseDir/resources/conda.yml"
        }

        executor {
            memory = params.memory
            cpus   = params.threads
        }

        report {
          enabled = true
          file = "$params.output/reports/lrv-finder.${params.sra.split(',')[0]}-${params.sra.split(',')[-1]}.report.html"
        }

        timeline {
          enabled = true
          file = "$params.output/reports/lrv-finder.${params.sra.split(',')[0]}-${params.sra.split(',')[-1]}.timeline.html"
        }

        trace {
          enabled = true
          file = "$params.output/reports/lrv-finder.${params.sra.split(',')[0]}-${params.sra.split(',')[-1]}.trace.txt"
        }

        conda {
          // Where to save the conda environment so it doesn"t need to be re-generated.
          cacheDir = "$baseDir/resources/cache/"
          createTimeout = "1 h"
        }
    }

    // Set up a profile for running on the cluster & specify the SLURM resources to be used for each job
    cluster {

        // Set O2 user-specific temporary directory
        params.tempdir = "/n/scratch3/users/a/am704/tmp/"

        process {

          // Global settings
          executor = "slurm"
          queue = "short"
          cache = "lenient"
          conda = "$baseDir/resources/conda.yml"

          // Error handling
          errorStrategy = "retry"
          maxRetries = 3

          // Set per-process resources
          withName: "log_inputs" {
              time    = { 1.m * task.attempt }
              memory  = { 1.GB * task.attempt }
              cpus    = 1
              }

          withName: "parse_sra_ids" {
              time    = { 5.m * task.attempt }
              memory  = { 1.GB * task.attempt }
              cpus    = 1
              }

          withName: "download_sra_files" {
              time    = { 30.m * task.attempt }
              memory  = { 16.GB * task.attempt }
              cpus    = 4
              }

          withName: "mapping" {
              time    = { 30.m * task.attempt }
              memory  = { 16.GB * task.attempt }
              cpus    = 8
              }

          withName: "combine_bams" {
              time    = { 30.m * task.attempt }
              memory  = { 16.GB * task.attempt }
              cpus    = 1
              }

          withName: "bam_to_fasta" {
              time    = { 30.m * task.attempt }
              memory  = { 8.GB * task.attempt }
              cpus    = 1
              }

          withName: "count_mapped_reads" {
              time    = { 15.m * task.attempt }
              memory  = { 8.GB * task.attempt }
              cpus    = 1
              }

          withName: "generate_final_summary" {
              time    = { 5.m * task.attempt }
              memory  = { 1.GB * task.attempt }
              cpus    = 1
              }

          withName: "print_results" {
              time    = { 5.m * task.attempt }
              memory  = { 1.GB * task.attempt }
              cpus    = 1
              }

        }

        executor {
          // Max jobs that Nextflow can submit at once (basically set to unlimited)
          queueSize = 10000
        }

        report {
          enabled = true
          file = "$params.output/reports/lrv-finder.${params.sra.split(',')[0]}-${params.sra.split(',')[-1]}.report.html"
        }

        timeline {
          enabled = true
          file = "$params.output/reports/lrv-finder.${params.sra.split(',')[0]}-${params.sra.split(',')[-1]}.timeline.html"
        }

        trace {
          enabled = true
          file = "$params.output/reports/lrv-finder.${params.sra.split(',')[0]}-${params.sra.split(',')[-1]}.trace.txt"
        }

        conda {
          // Where to save the conda environment so it doesn"t need to be re-generated.
          cacheDir = "$baseDir/resources/cache"
        }
    }
}
